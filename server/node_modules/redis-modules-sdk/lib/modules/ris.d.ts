import * as Redis from 'ioredis';
import { Module, RedisModuleOptions } from './module.base';
export declare class RedisIntervalSets extends Module {
    /**
     * Initializing the module object
     * @param name The name of the module
     * @param clusterNodes The nodes of the cluster
     * @param moduleOptions The additional module options
     * @param moduleOptions.isHandleError If to throw error on error
     * @param moduleOptions.showDebugLogs If to print debug logs
     * @param clusterOptions The options of the clusters
     */
    constructor(clusterNodes: Redis.ClusterNode[], moduleOptions?: RedisModuleOptions, clusterOptions?: Redis.ClusterOptions);
    /**
     * Initializing the module object
     * @param name The name of the module
     * @param redisOptions The options of the redis database
     * @param moduleOptions The additional module options
     * @param moduleOptions.isHandleError If to throw error on error
     * @param moduleOptions.showDebugLogs If to print debug logs
     */
    constructor(redisOptions: Redis.RedisOptions, moduleOptions?: RedisModuleOptions);
    /**
     * Adding an interval set
     * @param key The name of the key
     * @param sets A list of sets to create. At least 1 set is required.
     */
    add(key: string, sets: RISSet[]): Promise<'OK'>;
    /**
     * Retrieving all of key interval sets/a single set.
     * @param key The name of the key
     * @param setName Optional. The name of specific set. If not passed all interval sets under key will be retrieved.
     */
    get(key: string, setName?: string): Promise<RISSet[]>;
    /**
     * Deleting a all interval sets under a key, or a single/list of specific set/s.
     * @param key The name of the key
     * @param setNames Optional. A list of set names to delete. If not passed all interval sets under key will be removed.
     */
    del(key: string, setNames?: string[]): Promise<'OK'>;
    /**
     * Retrieving all sets under a key that have a specific score in their range.
     * @param key The name of the key
     * @param score The score of the set
     */
    score(key: string, score: number): Promise<string[]>;
    /**
     * Retrieving all sets under a key that don't have a specific score in their range.
     * @param key The name of the key
     * @param score The score of the set
     */
    notScore(key: string, score: number): Promise<string[]>;
    /**
     * Parsing the iset.get command response
     * @param sets The list of sets
     */
    private parseGet;
}
/**
 * The Interval Set object
 * @param name The name of the interval set
 * @param minimum The minimum score of the interval set
 * @param maximum The maximum score of the interval set
 */
export declare type RISSet = {
    name?: string;
    minimum: number;
    maximum: number;
};
